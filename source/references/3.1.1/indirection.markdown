---
layout: default
title: "Indirection Reference"
canonical: "/references/latest/indirection.html"
---


# Indirection Reference



**This page is autogenerated; any changes will get overwritten** *(last generated on Mon Feb 04 12:14:42 -0800 2013)*

This is the list of all indirections, their associated terminus classes, and how you select between them.

In general, the appropriate terminus class is selected by the application for you (e.g., `puppet agent` would always use the `rest`
terminus for most of its indirected classes), but some classes are tunable via normal settings.  These will have `terminus setting` documentation listed with them.


## catalog

* **Terminus Setting**: catalog_terminus

active_record
: A component of ActiveRecord storeconfigs. ActiveRecord-based storeconfigs
  and inventory are deprecated. See http://links.puppetlabs.com/activerecord-deprecation

compiler
: Compiles catalogs on demand using Puppet's compiler.

json
: Store catalogs as flat files, serialized using JSON.

queue
: Part of async storeconfigs, requiring the puppet queue daemon. ActiveRecord-based storeconfigs
  and inventory are deprecated. See http://links.puppetlabs.com/activerecord-deprecation

rest
: Find resource catalogs over HTTP via REST.

static_compiler
: Compiles catalogs on demand using the optional static compiler. This
  functions similarly to the normal compiler, but it replaces puppet:/// file
  URLs with explicit metadata and file content hashes, expecting puppet agent
  to fetch the exact specified content from the filebucket. This guarantees
  that a given catalog will always result in the same file states. It also
  decreases catalog application time and fileserver load, at the cost of
  increased compilation time.

  This terminus works today, but cannot be used without additional
  configuration. Specifically:

  You must create a `Filebucket['puppet']` resource in site.pp (or somewhere
  else where it will be added to every node's catalog). The title of this
  resource **MUST** be "puppet"; the static compiler treats this title as magical.

      # Note: the special $servername var always contains the master's FQDN,
      # even if it was reached at a different name.
      filebucket { puppet:
        server => $servername,
        path   => false,
      }

  You must set `catalog_terminus = static_compiler` in the puppet master's puppet.conf.

  If you are using multiple puppet masters, you must configure load balancer
  affinity for agent nodes. This is because puppet masters other than the one
  that compiled a given catalog may not have stored the required file contents
  in their filebuckets.

store_configs
: Part of the "storeconfigs" feature. Should not be directly set by end users.

yaml
: Store catalogs as flat files, serialized using YAML.

## certificate



ca
: Manage the CA collection of signed SSL certificates on disk.

disabled_ca
: Manage SSL certificates on disk, but reject any remote access
  to the SSL data store.  Used when a master has an explicitly disabled
  CA to prevent clients getting confusing 'success' behaviour.

file
: Manage SSL certificates on disk.

rest
: Find and save certificates over HTTP via REST.

## certificate_request



ca
: Manage the CA collection of certificate requests on disk.

disabled_ca
: Manage SSL certificate requests on disk, but reject any remote access
  to the SSL data store. Used when a master has an explicitly disabled CA to
  prevent clients getting confusing 'success' behaviour.

file
: Manage the collection of certificate requests on disk.

rest
: Find and save certificate requests over HTTP via REST.

## certificate_revocation_list



ca
: Manage the CA collection of certificate requests on disk.

disabled_ca
: Manage SSL certificate revocation lists, but reject any remote access
  to the SSL data store. Used when a master has an explicitly disabled CA to
  prevent clients getting confusing 'success' behaviour.

file
: Manage the global certificate revocation list.

rest
: Find and save certificate revocation lists over HTTP via REST.

## certificate_status



file
: Manipulate certificate status on the local filesystem. Only functional
  on the CA.

rest
: Sign, revoke, search for, or clean certificates & certificate requests over HTTP.

## data_binding

Where to find external data bindings.

* **Terminus Setting**: data_binding_terminus

hiera
: Retrieve data using Hiera.

none
: A Dummy terminus that always returns nil for data lookups.

## facts

* **Terminus Setting**: facts_terminus

active_record
: A component of ActiveRecord storeconfigs and inventory. ActiveRecord-based storeconfigs
  and inventory are deprecated. See http://links.puppetlabs.com/activerecord-deprecation

couch
: Store facts in CouchDB. This should not be used with the inventory service;
  it is for more obscure custom integrations. If you are wondering whether you
  should use it, you shouldn't; use PuppetDB instead.

facter
: Retrieve facts from Facter.  This provides a somewhat abstract interface
  between Puppet and Facter.  It's only `somewhat` abstract because it always
  returns the local host's facts, regardless of what you attempt to find.

inventory_active_record
: Medium-performance fact storage suitable for the inventory service.
  Most users should use PuppetDB instead. Note: ActiveRecord-based storeconfigs
  and inventory are deprecated. See http://links.puppetlabs.com/activerecord-deprecation

inventory_service
: Find and save facts about nodes using a remote inventory service.

memory
: Keep track of facts in memory but nowhere else.  This is used for
  one-time compiles, such as what the stand-alone `puppet` does.
  To use this terminus, you must load it with the data you want it
  to contain.

network_device
: Retrieve facts from a network device.

rest
: Find and save facts about nodes over HTTP via REST.

store_configs
: Part of the "storeconfigs" feature. Should not be directly set by end users.

yaml
: Store client facts as flat files, serialized using YAML, or
  return deserialized facts from disk.

## file_bucket_file



file
: Store files in a directory set based on their checksums.

rest
: This is a REST based mechanism to send/retrieve file to/from the filebucket

selector
: Select the terminus based on the request

## file_content



file
: Retrieve file contents from disk.

file_server
: Retrieve file contents using Puppet's fileserver.

rest
: Retrieve file contents via a REST HTTP interface.

selector
: Select the terminus based on the request

## file_metadata



file
: Retrieve file metadata directly from the local filesystem.

file_server
: Retrieve file metadata using Puppet's fileserver.

rest
: Retrieve file metadata via a REST HTTP interface.

selector
: Select the terminus based on the request

## instrumentation_data



local
: Undocumented.

rest
: Undocumented.

## instrumentation_listener



local
: Undocumented.

rest
: Undocumented.

## instrumentation_probe



local
: Undocumented.

rest
: Undocumented.

## key



ca
: Manage the CA's private on disk.  This terminus *only* works
  with the CA key, because that's the only key that the CA ever interacts
  with.

disabled_ca
: Manage the CA private key, but reject any remote access
  to the SSL data store. Used when a master has an explicitly disabled CA to
  prevent clients getting confusing 'success' behaviour.

file
: Manage SSL private and public keys on disk.

## node

Where to find node information.
A node is composed of its name, its facts, and its environment.

* **Terminus Setting**: node_terminus

active_record
: A component of ActiveRecord storeconfigs. ActiveRecord-based storeconfigs
  and inventory are deprecated. See http://links.puppetlabs.com/activerecord-deprecation

exec
: Call an external program to get node information.  See
  the [External Nodes](http://docs.puppetlabs.com/guides/external_nodes.html) page for more information.

ldap
: Search in LDAP for node configuration information.  See
  the [LDAP Nodes](http://projects.puppetlabs.com/projects/puppet/wiki/Ldap_Nodes) page for more information.  This will first
  search for whatever the certificate name is, then (if that name
  contains a `.`) for the short name, then `default`.

memory
: Keep track of nodes in memory but nowhere else.  This is used for
  one-time compiles, such as what the stand-alone `puppet` does.
  To use this terminus, you must load it with the data you want it
  to contain; it is only useful for developers and should generally not
  be chosen by a normal user.

plain
: Always return an empty node object. Assumes you keep track of nodes
  in flat file manifests.  You should use it when you don't have some other,
  functional source you want to use, as the compiler will not work without a
  valid node terminus.

  Note that class is responsible for merging the node's facts into the
  node instance before it is returned.

rest
: Get a node via REST. Puppet agent uses this to allow the puppet master
  to override its environment.

store_configs
: Part of the "storeconfigs" feature. Should not be directly set by end users.

write_only_yaml
: Store node information as flat files, serialized using YAML,
  does not deserialize (write only).

yaml
: Store node information as flat files, serialized using YAML,
  or deserialize stored YAML nodes.

## report



processor
: Puppet's report processor.  Processes the report with each of
  the report types listed in the 'reports' setting.

rest
: Get server report over HTTP via REST.

yaml
: Store last report as a flat file, serialized using YAML.

## resource



active_record
: A component of ActiveRecord storeconfigs. ActiveRecord-based storeconfigs
  and inventory are deprecated. See http://links.puppetlabs.com/activerecord-deprecation

ral
: Manipulate resources with the resource abstraction layer. Only used internally.

rest
: Maniuplate resources remotely? Undocumented.

store_configs
: Part of the "storeconfigs" feature. Should not be directly set by end users.

## resource_type



parser
: Return the data-form of a resource type.

rest
: Retrieve resource types via a REST HTTP interface.

## status



local
: Get status locally. Only used internally.

rest
: Get puppet master's status via REST. Useful because it tests the health
  of both the web server and the indirector.



----------------

*This page autogenerated on Mon Feb 04 12:14:42 -0800 2013*
